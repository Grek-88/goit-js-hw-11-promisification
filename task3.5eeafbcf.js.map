{"version":3,"sources":["js/task3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","canProcess","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"AAAA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC9C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD,CAFD;;AAIA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACrC,MAAMC,KAAK,GAAGR,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC;AAGA,SAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClCC,IAAAA,UAAU,CAAC,YAAM;AACvB,UAAMC,UAAU,GAAGV,IAAI,CAACE,MAAL,KAAgB,GAAnC;;AAEA,UAAIQ,UAAJ,EAAgB;AACZH,QAAAA,OAAO,CAAC;AAAEI,UAAAA,EAAE,EAAEP,WAAW,CAACO,EAAlB;AAAsBC,UAAAA,IAAI,EAAEP;AAA5B,SAAD,CAAP;AACH,OAFD,MAEO;AACHG,QAAAA,MAAM,CAACJ,WAAW,CAACO,EAAb,CAAN;AACH;AACF,KARiB,EAQfN,KARe,CAAV;AASL,GAVM,CAAP;AAWH,CAfD;;AAiBA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA,MAAfF,EAAe,QAAfA,EAAe;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACnCE,EAAAA,OAAO,CAACC,GAAR,uBAA2BJ,EAA3B,2BAA8CC,IAA9C;AACD,CAFD;;AAIA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAAL,EAAE,EAAI;AACrBG,EAAAA,OAAO,CAACG,IAAR,wCAA6CN,EAA7C;AACD,CAFD;;AAKAR,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT","file":"task3.5eeafbcf.js","sourceRoot":"..\\src","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    \r\n\r\n    return new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n    } else {\r\n        reject(transaction.id);\r\n    }\r\n  }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"]}